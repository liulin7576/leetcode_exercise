思路：
求二维非空矩阵的小矩形的和的最大值，但不能大于k；
超难的一题，下面是简单粗暴的方法：

for example:
Input: matrix = [[1,0,1],[0,-2,3]], k = 2
Output: 2 
Explanation: Because the sum of rectangle [[0, 1], [-2, 3]] is 2,
             and 2 is the max number no larger than k (k = 2).


实现代码：
class Solution {
public:
    int maxSumSubmatrix(vector<vector<int>>& matrix, int k) {
        if(matrix.size() == 0 || matrix[0].size() == 0)
            return 0;
        int m = matrix.size(), n = matrix[0].size();
        vector<vector<int>> sum(m, vector<int>(n, 0));
        int s = 0;
        for(int i = 0; i < m ; i++)  //这里sum矩阵求的是(i,j)到左上角的和
        {
            for(int j = 0; j < n; j++)
            {
                sum[i][j] = matrix[i][j];
                if(i - 1 >= 0)      
                    sum[i][j] += sum[i - 1][j];
                if(j - 1 >= 0)
                    sum[i][j] += sum[i][j - 1];
                if(i - 1 >= 0 && j - 1 >= 0)
                    sum[i][j] -= sum[i - 1][j - 1];
            }
        }
        int res = 0x80000000;   //令为int类型的最小值
        for(int row1 = 0; row1 < m; row1++)
        {
            for(int col1 = 0; col1 < n; col1++)
            {
                for(int row2 = row1; row2 < m; row2++)
                {
                    for(int col2 = col1; col2 < n; col2++)
                    {
                        int buff = sum[row2][col2];
                        if(row1 - 1 >= 0)
                            buff -= sum[row1 - 1][col2];
                        if(col1 - 1 >= 0)
                            buff -= sum[row2][col1 - 1];
                        if(row1 - 1 >= 0 && col1 - 1 >= 0)
                            buff += sum[row1 - 1][col1 - 1];
                        if(buff <= k)
                            res = max(res, buff);
                    }
                }
            }
        }
        return res;
    }
};
/*
上面核心部分的解释：
如上面例子中求出来的sum矩阵为      1    1   2
			           1  -1   3
那么假设遍历到-1这个点，此时要求的矩阵便是[-1]这个小矩阵的和，怎么求呢？sum是到左上角的和，也就是说:
sum - [1    -   [1,   1] +   [1]  也就是这个节点的和了（-1 - 1 - 1 + 1 = -2），所以上面的遍历就是如此；
           1]  
*/

时间复杂度：O((mn)^2)
空间复杂度：O(n^2)